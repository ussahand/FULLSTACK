
let counter = 1;

function tinyid() { // local int id
  const ms = Date.now();

  // generate the 2 left most wortht number in 2^62-1 = 3FFFFFFFFFFFFFFF
  // 4,611,686,018,427,387,903
  const randomStr = Math.floor((Math.random() * 36 +10)).toString() ; 

  const counterStr =  ('0000' + counter).slice(-4);

  counter = (counter + 1) % 10000;

  // return counterStr + ms
  return randomStr + counterStr + ms
}


//-----------Test id generator uniquness
function test_tinyid_uniqueness(poolSize: number , tinyid: any) {
  let c = 0;

  const pool = new Set(Array(1e6).fill(poolSize).map(
    () => { c++; return tinyid()}
  ))

  console.log('test size is: ',  c)
  console.log('unique id pool size is:', pool.size)
  console.log('Duplicated id numbers is: ', c - pool.size)
}

test_tinyid_uniqueness(1e7, tinyid)

//--------- Generate per second
function genPerSec(fnname: string, uuidFn: any) {
  const tic = Date.now() ;
  let toc, elapsed, speed = 0;

  do {
    uuidFn()
    toc = Date.now();
    elapsed = toc - tic ;
    speed ++;
  } while (elapsed < 1000)
  console.log("number of generated by ",fnname, ' is ', speed)
}

console.log()
genPerSec('tinyid', tinyid);

import { v1 , v4 } from 'uuid'
import { nanoid } from 'nanoid'

genPerSec('    v1', v1);
genPerSec('    v4', v4);

genPerSec('nanoid', nanoid);

console.log()
console.log('uuid   len',v4().length)
console.log('nanoid len',nanoid().length)
console.log('tinyid len',tinyid().length)

console.log()
console.log('uuid:  ',v4())
console.log('nanoid:',nanoid())
console.log('tinyid:',tinyid())
